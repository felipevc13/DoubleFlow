// ~/types/nodeHandler.ts
import type { TaskFlowNode, NodeData } from "../types/taskflow"; // Import TaskFlowNode and NodeData from types/taskflow
import type { FetchError, FetchResponse } from "ofetch"; // Added for fetchInstance type

/**
 * Defines the standard interface for handling logic specific to a node type
 * within the TaskFlow system. Each node type (e.g., 'problem', 'dataSource')
 * should have a corresponding handler implementing this interface.
 */
export interface INodeHandler {
  /**
   * Initializes the data object for a new node of this type.
   * @param initialConfig - Optional configuration passed during node creation.
   * @returns The initial NodeData structure for this node type.
   */
  initializeData(initialConfig?: any): NodeData;

  /**
   * Processes the aggregated outputs from all directly connected parent nodes
   * and updates the current node's data accordingly.
   * @param currentNodeData - The data object of the node being processed.
   * @param parentOutputs - A record mapping parent node IDs to their respective outputData.
   * @param fetchInstance - The fetch instance to use for API calls.
   * @returns The updated partial NodeData object for the current node, potentially asynchronously.
   */
  processInput(
    currentNodeData: NodeData,
    parentOutputs: Record<string, any>,
    fetchInstance: typeof $fetch
  ): Partial<NodeData> | Promise<Partial<NodeData>>;

  /**
   * Generates the output data for this node based on its current state.
   * This output will be passed to connected child nodes.
   * @param currentNode - The full node object, including its data, id, type, etc.
   * @returns A record representing the output data generated by this node.
   */
  generateOutput(
    currentNode: TaskFlowNode
  ): Record<string, any> | null | Promise<Record<string, any> | null>; // Can be sync or async, and can return null

  /**
   * (Optional) Formats or selects data specifically for display purposes
   * in the node's card component in the UI.
   * @param currentNode - The full node object.
   * @returns Data structured for display.
   */
  getDisplayData?(currentNode: TaskFlowNode): any;

  /**
   * (Optional) Handles specific actions triggered on the node, potentially
   * involving asynchronous operations like API calls.
   * @param action - A string identifying the action to perform.
   * @param payload - Data associated with the action.
   * @param currentNode - The full node object.
   * @param fetchInstance - The fetch instance to use for API calls.
   * @returns A promise that resolves with the updated NodeData (only the data part), or void if the data wasn't changed directly.
   */
  handleAction?(
    action: string,
    payload: any,
    currentNode: TaskFlowNode, // Pass the full node
    fetchInstance: typeof $fetch // Use Nuxt's $fetch type
  ): Promise<Partial<NodeData> | void | { error?: string; [key: string]: any }>; // Return only the updated data part
}

/**
 * Represents a tool that can be displayed on a node in the UI.
 */
export interface NodeTool {
  id: string; // Unique identifier for the tool
  label: string; // Text displayed for the tool
  icon?: string; // Optional: Icon to display (e.g., from an icon library)
  action: string; // The action string to be dispatched when the tool is used
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  payload?: any; // Optional: Payload to be sent with the action
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  disabled?: (node: TaskFlowNode) => boolean; // Optional: Function to determine if the tool is disabled
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  tooltip?: string | ((node: TaskFlowNode) => string); // Optional: Tooltip text or function to generate it
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  color?: string; // Optional: Color for the tool button
}

export type { TaskFlowNode, NodeData };
